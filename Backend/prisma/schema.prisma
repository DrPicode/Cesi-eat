// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  engineType = "library"
  previewFeatures = ["relationJoins"]
}

enum UserType {
  Client
  Cooker
  DeliveryMan
}

enum RestaurantType {
  Restaurant
  FastFood
  FoodTruck
  Asian
  Poke
  Salad
}

model User {
  id_user    Int      @id @default(autoincrement())
  lastName   String
  password   String?
  email      String?  @unique
  firstName  String
  phone      String
  is_deleted  Boolean @default(false)

  type       UserType @default(Client)
  restaurant Restaurant?

  address Address @relation(fields: [address_id_address], references: [id_address])
  address_id_address Int

  cart        Cart[]

  @@map("user")
}

model Restaurant {
  id_restaurant  Int      @id @default(autoincrement())
  name          String
  thumbnail     String
  is_deleted    Boolean   @default(false)

  type          RestaurantType

  user User @relation(fields: [user_id_user], references: [id_user])
  user_id_user Int @unique

  articles      Article[]

  address Address?

  @@map("restaurant")
}

enum ArticleType {
  Entry
  MainCourse
  SideDish
  Dessert
  Drink
}

model Article {
  id_article  Int      @id @default(autoincrement())
  name        String
  price       Float
  thumbnail   String
  is_deleted  Boolean

  type       ArticleType

  restaurant Restaurant @relation(fields: [restaurant_id_restaurant], references: [id_restaurant])
  restaurant_id_restaurant Int

  carts CartArticle[]

  @@map("article")
}

model Address {
  id_address  Int      @id @default(autoincrement())
  address      String
  city        String
  postalCode  String
  is_deleted  Boolean

  orders Order[]
  users User[]

  restaurant Restaurant? @relation(fields: [restaurant_id_restaurant], references: [id_restaurant])
  restaurant_id_restaurant Int? @unique

  @@map("address")
}

model Cart {
  id_cart     Int      @id @default(autoincrement())
  is_deleted  Boolean

  user User @relation(fields: [user_id_user], references: [id_user])
  user_id_user Int

  articles CartArticle[]

  order Order @relation(fields: [order_id_order], references: [id_order])
  order_id_order Int @unique

  @@map("cart")
}

model CartArticle {
  cartId    Int
  articleId Int
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id_cart])
  article   Article  @relation(fields: [articleId], references: [id_article])

  @@id([cartId, articleId])
}

enum OrderStatus {
  Paid
  Preparing
  Delivering
  Delivered
  Cancelled
}

model Order {
  id_order    Int      @id @default(autoincrement())
  is_deleted  Boolean

  delivery_hour  DateTime
  delivery_code  Int
  price          Float
  delivery_fees  Float?
  service_fees   Float?

  address Address @relation(fields: [address_id_address], references: [id_address])
  address_id_address Int

  cart Cart?

  status OrderStatus

  @@map("order")
}